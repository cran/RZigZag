// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// ZigZagLogistic
List ZigZagLogistic(const Eigen::MatrixXd dataX, const Eigen::VectorXi dataY, const unsigned int n_epochs, const bool subsampling, const bool controlvariates, const NumericVector beta0, const unsigned int n_samples, const unsigned int n_batches, const bool computeCovariance, const bool upperbound);
RcppExport SEXP _RZigZag_ZigZagLogistic(SEXP dataXSEXP, SEXP dataYSEXP, SEXP n_epochsSEXP, SEXP subsamplingSEXP, SEXP controlvariatesSEXP, SEXP beta0SEXP, SEXP n_samplesSEXP, SEXP n_batchesSEXP, SEXP computeCovarianceSEXP, SEXP upperboundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type dataX(dataXSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type dataY(dataYSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_epochs(n_epochsSEXP);
    Rcpp::traits::input_parameter< const bool >::type subsampling(subsamplingSEXP);
    Rcpp::traits::input_parameter< const bool >::type controlvariates(controlvariatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_batches(n_batchesSEXP);
    Rcpp::traits::input_parameter< const bool >::type computeCovariance(computeCovarianceSEXP);
    Rcpp::traits::input_parameter< const bool >::type upperbound(upperboundSEXP);
    rcpp_result_gen = Rcpp::wrap(ZigZagLogistic(dataX, dataY, n_epochs, subsampling, controlvariates, beta0, n_samples, n_batches, computeCovariance, upperbound));
    return rcpp_result_gen;
END_RCPP
}
// ZigZagGaussian
List ZigZagGaussian(const Eigen::MatrixXd V, const Eigen::VectorXd mu, const unsigned int n_epochs, const NumericVector x0, const unsigned int n_samples, const unsigned int n_batches, bool computeCovariance, const double c);
RcppExport SEXP _RZigZag_ZigZagGaussian(SEXP VSEXP, SEXP muSEXP, SEXP n_epochsSEXP, SEXP x0SEXP, SEXP n_samplesSEXP, SEXP n_batchesSEXP, SEXP computeCovarianceSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_epochs(n_epochsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_batches(n_batchesSEXP);
    Rcpp::traits::input_parameter< bool >::type computeCovariance(computeCovarianceSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(ZigZagGaussian(V, mu, n_epochs, x0, n_samples, n_batches, computeCovariance, c));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RZigZag_ZigZagLogistic", (DL_FUNC) &_RZigZag_ZigZagLogistic, 10},
    {"_RZigZag_ZigZagGaussian", (DL_FUNC) &_RZigZag_ZigZagGaussian, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_RZigZag(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
